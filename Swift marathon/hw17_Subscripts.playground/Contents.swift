import UIKit

/*
 –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ (–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
 1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø —à–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞.
 2. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–±—Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –∫–ª–µ—Ç–∫–∏ (–±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞).
 3. –ï—Å–ª–∏ —é–∑–µ—Ä –æ—à–∏–±—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ ‚Äì –≤—ã–¥–∞–≤–∞–π—Ç–µ –Ω–∏–ª.
 
 –ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
 1. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –ø–æ–ª–µ –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏. –ù–∞ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: –ü—É—Å—Ç–æ, –ö—Ä–µ—Å—Ç–∏–∫, –ù–æ–ª–∏–∫. –î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–∏–≤–æ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–µ.
 2. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–±—Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ —Ä—è–¥—É –∏ —Å—Ç–æ–ª–±—Ü—É. –ü—Ä–∏—á–µ–º –≤—ã –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–∞–¥–∞–ª–∞ –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä—è–¥ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü.
 3. –¢–∞–∫–∂–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—Ä–µ—Å—Ç–∏–∫ –ª–∏–±–æ –Ω–æ–ª–∏–∫ —Ç—É–¥–∞, –≥–¥–µ –æ–Ω–∏ —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å. –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è.
 4. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –¥–æ–±–∞–≤—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—á–∏—Å–ª–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.
 
 –ú–æ—Ä—Å–∫–æ–π –±–æ–π (–¢—è–∂–µ–ª—ã–π —É—Ä–æ–≤–µ–Ω—å)
 1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. –í –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–¥–Ω–æ–º–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ–ø–∞—Ö–∏–≤–∞–µ—Ç —Å–∞–±—Å–∫—Ä–∏–ø—Ç–æ–º). –ö–æ—Ä–∞–±–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª—ã –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ–≥–¥–∞ –æ–Ω —É–±–∏—Ç.
 2. –°–æ–∑–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –∫–æ—Ä–∞–±–ª–∏ –≤—Ä–∞–≥–∞. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –∏ –ø–æ–¥–±–µ–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–π —á–µ—Ç—ã—Ä–µ—Ö —Ç—Ä—É–±–Ω–∏–∫.
 3. –°–¥–µ–ª–∞–π—Ç–µ –¥–ª—è –ø—Ä–∏–ª–∏—á–∏—è –ø–∞—Ä—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –º–∏–º–æ, –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤—Å–µ –≤—ã–≤–æ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω.
 */

//–®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ (–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)

enum Color {
    case white
    case black
}

struct ChessDesk {
    
    subscript(column: String, row: Int) -> Color? {
        var number = 0
        
        switch column {
        case "a": number = 1
        case "b": number = 2
        case "c": number = 3
        case "d": number = 4
        case "e": number = 5
        case "f": number = 6
        case "g": number = 7
        case "h": number = 8
        default:  number = 0
        }
        
        if row < 1 || row > 8 || number == 0 {
            return nil
        } else if (number + row) % 2 == 0 {
            return .black
        } else {
            return .white
        }
    }
}

var gameField = ChessDesk()

gameField["a", 1]
gameField["a", 2]
gameField["z", 2]
gameField["b", 10]
gameField["z", 10]

// –ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)

enum Sign: String {
    case cross = "‚úñÔ∏è"
    case zero = "üîò"
    case empty = "‚óªÔ∏è"
}

struct CrossAndZero {
    
    var field = Array(repeating: Sign.empty.rawValue, count: 9)
    
    func show() {
        print("\(field[0])\(field[1])\(field[2])")
        print("\(field[3])\(field[4])\(field[5])")
        print("\(field[6])\(field[7])\(field[8])")
        
        if field[0] == Sign.cross.rawValue && field[1] == Sign.cross.rawValue && field[2] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[3] == Sign.cross.rawValue && field[4] == Sign.cross.rawValue && field[5] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[6] == Sign.cross.rawValue && field[7] == Sign.cross.rawValue && field[8] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[0] == Sign.cross.rawValue && field[3] == Sign.cross.rawValue && field[6] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[1] == Sign.cross.rawValue && field[4] == Sign.cross.rawValue && field[7] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[2] == Sign.cross.rawValue && field[5] == Sign.cross.rawValue && field[8] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[0] == Sign.cross.rawValue && field[4] == Sign.cross.rawValue && field[8] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[2] == Sign.cross.rawValue && field[4] == Sign.cross.rawValue && field[6] == Sign.cross.rawValue {
            print("")
            print("Cross win!")
        }
        
        if field[0] == Sign.zero.rawValue && field[1] == Sign.zero.rawValue && field[2] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[3] == Sign.zero.rawValue && field[4] == Sign.zero.rawValue && field[5] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[6] == Sign.zero.rawValue && field[7] == Sign.zero.rawValue && field[8] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[0] == Sign.zero.rawValue && field[3] == Sign.zero.rawValue && field[6] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[1] == Sign.zero.rawValue && field[4] == Sign.zero.rawValue && field[7] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[2] == Sign.zero.rawValue && field[5] == Sign.zero.rawValue && field[8] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[0] == Sign.zero.rawValue && field[4] == Sign.zero.rawValue && field[8] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
        
        if field[2] == Sign.zero.rawValue && field[4] == Sign.zero.rawValue && field[6] == Sign.zero.rawValue {
            print("")
            print("Zero win!")
        }
    }
    
    mutating func clean() {
        print("")
        print("New game")
        print("")
        
        field = Array(repeating: Sign.empty.rawValue, count: 9)
    }
    
    subscript(number: Int) -> Sign.RawValue? {
        get {
            switch number {
            case 1...9: return field[number - 1]
            default: break
            }
            return nil
        }
        
        set {
            switch number {
            case 1...9 where field[number - 1] == Sign.empty.rawValue : return field[number - 1] = newValue ?? ""
            default: break
            }
        }
    }
}

var field = CrossAndZero()

field[1] = Sign.cross.rawValue
field[2] = Sign.cross.rawValue
field[3] = Sign.zero.rawValue
field[3] = Sign.cross.rawValue // –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫—Ä–µ—Å—Ç–∏–∫ –≤–º–µ—Å—Ç–æ –Ω–æ–ª–∏–∫–∞
field[5] = Sign.zero.rawValue
field[7] = Sign.cross.rawValue
field[999] = Sign.zero.rawValue  //–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ—à–∏–±–∫–µ
field[777]                       //–Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –æ—à–∏–±–∫–µ
field.show()

field.clean() //–æ—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è

field[1] = Sign.cross.rawValue
field[4] = Sign.zero.rawValue
field[7] = Sign.cross.rawValue
field[9] = Sign.zero.rawValue
field[3] = Sign.cross.rawValue
field[2] = Sign.zero.rawValue
field[5] = Sign.cross.rawValue
field.show()

print("")

//–ú–æ—Ä—Å–∫–æ–π –±–æ–π (–¢—è–∂–µ–ª—ã–π —É—Ä–æ–≤–µ–Ω—å)
//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. –í –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–¥–Ω–æ–º–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ–ø–∞—Ö–∏–≤–∞–µ—Ç —Å–∞–±—Å–∫—Ä–∏–ø—Ç–æ–º). –ö–æ—Ä–∞–±–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª—ã –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ–≥–¥–∞ –æ–Ω —É–±–∏—Ç.
//2. –°–æ–∑–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –∫–æ—Ä–∞–±–ª–∏ –≤—Ä–∞–≥–∞. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –∏ –ø–æ–¥–±–µ–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–π —á–µ—Ç—ã—Ä–µ—Ö —Ç—Ä—É–±–Ω–∏–∫.
//3. –°–¥–µ–ª–∞–π—Ç–µ –¥–ª—è –ø—Ä–∏–ª–∏—á–∏—è –ø–∞—Ä—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –º–∏–º–æ, –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤—Å–µ –≤—ã–≤–æ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω.

let (empty, ship, shoot, out)  = ("‚óªÔ∏è", "‚¨õÔ∏è", "üí•", "üßø")

struct Game {
    
    var field = Array(repeating: empty, count: 100)
    
    func show() {
        print("   A B C D E F G H I J")
        var (i, j) = (0, 0)
        
        while i < 100 {
            let line = field
                .enumerated()
                .filter { $0.offset >= i && $0.offset < i + 10 }
                .reduce(into: "\(j) ") { $0 += $1.element }
            print(line)
            j += 1
            i += 10
        }
    }
    
    mutating func addShip(column: String, row: Int) {
        guard row < 10 else { return }
        let i = row * 10
        
        switch column.lowercased() {
        case "a": field[0 + i] = ship
        case "b": field[1 + i] = ship
        case "c": field[2 + i] = ship
        case "d": field[3 + i] = ship
        case "e": field[4 + i] = ship
        case "f": field[5 + i] = ship
        case "g": field[6 + i] = ship
        case "h": field[7 + i] = ship
        case "i": field[8 + i] = ship
        case "j": field[9 + i] = ship
        default: break
        }
    }
    
    subscript(column: String, row: Int) -> String? {
        get {
            return nil
        }
        
        set {
            guard row < 10 else { return }
            let i = row * 10
            
            switch column.lowercased() {
            case "a":
                if field[0 + i] == ship {
                    field[0 + i] = shoot
                } else if field[0 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[0 + i] = out
                }
            case "b":
                if field[1 + i] == ship {
                    field[1 + i] = shoot
                } else if field[1 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[1 + i] = out
                }
            case "c":
                if field[2 + i] == ship {
                    field[2 + i] = shoot
                } else if field[2 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[2 + i] = out
                }
            case "d":
                if field[3 + i] == ship {
                    field[3 + i] = shoot
                } else if field[3 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[3 + i] = out
                }
            case "e":
                if field[4 + i] == ship {
                    field[4 + i] = shoot
                } else if field[4 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[4 + i] = out
                }
            case "f":
                if field[5 + i] == ship {
                    field[5 + i] = shoot
                } else if field[5 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[5 + i] = out
                }
            case "g":
                if field[6 + i] == ship {
                    field[6 + i] = shoot
                } else if field[6 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[6 + i] = out
                }
            case "h":
                if field[7 + i] == ship {
                    field[7 + i] = shoot
                } else if field[7 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[7 + i] = out
                }
            case "i":
                if field[8 + i] == ship {
                    field[8 + i] = shoot
                } else if field[8 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[8 + i] = out
                }
            case "j":
                if field[9 + i] == ship {
                    field[9 + i] = shoot
                } else if field[9 + i] == shoot {
                    print("Target is already fired üî•\n")
                } else {
                    field[9 + i] = out
                }
            default:
                break
            }
        }
    }
}

var player = Game()
player.addShip(column: "a", row: 0)
player.addShip(column: "b", row: 0)
player.addShip(column: "c", row: 0)
player.addShip(column: "d", row: 0)
player.addShip(column: "i", row: 7)
player.addShip(column: "i", row: 8)
player.addShip(column: "i", row: 9)
player.addShip(column: "c", row: 3)
player.addShip(column: "c", row: 4)
player.addShip(column: "c", row: 5)
player.addShip(column: "a", row: 9)
player.addShip(column: "b", row: 9)
player.addShip(column: "h", row: 2)
player.addShip(column: "i", row: 2)
player.addShip(column: "e", row: 7)
player.addShip(column: "f", row: 7)
player.addShip(column: "j", row: 0)
player.addShip(column: "a", row: 7)
player.addShip(column: "f", row: 9)
player.addShip(column: "f", row: 4)
player.addShip(column: "f", row: 77) // no error

player["a", 0] = shoot
player["b", 0] = shoot
player["c", 0] = shoot
player["d", 0] = shoot
player["j", 4] = shoot
player["g", 0] = shoot
player["f", 9] = shoot
player["d", 33] = shoot // no error
player["z", 77]         // no error
player["a", 0] = shoot
player["b", 7] = shoot
player["a", 9] = shoot
player["a", 8] = shoot

player.show()
